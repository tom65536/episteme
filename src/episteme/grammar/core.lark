
%import .lexical.SPACE
%import .lexical.COMMENT
%import .lexical.IDENTIFIER
%import .lexical._NEWLINE
%import .lexical.DECIMAL_LITERAL
%import .lexical.RADICAL_LITERAL
%import .lexical.FLOAT_LITERAL
%import .lexical.STRING_FULL
%import .lexical.STRING_LEFT
%import .lexical.STRING_MID
%import .lexical.STRING_RIGHT
%import .lexical.PLUS
%import .lexical.MINUS
%import .lexical.AST
%import .lexical.DIV
%import .lexical.IDIV
%import .lexical.MOD
%import .lexical.DIVMOD
%import .lexical.POW
%import .lexical.AND
%import .lexical.OR
%import .lexical.XOR
%import .lexical.NOT
%import .lexical.GT
%import .lexical.LT
%import .lexical.GE
%import .lexical.LE
%import .lexical.NE
%import .lexical.IN
%import .lexical.EQ
%import .lexical.REQUIRE
%import .lexical.AS
%import .lexical.ALIAS
%import .lexical.OPI
%import .lexical.STRIDENT
%import .lexical.STRESC
%import .lexical.ANONYMOUS
%import .lexical.OF
%import .lexical.OP_NAME

%declare _INDENT _DEDENT DOC

%ignore SPACE
%ignore COMMENT

start: [[_NEWLINE] DOC] (_NEWLINE | stmt)*

?stmt: simple_stmt | compound_stmt
?simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE

?small_stmt: "unreachable"

?compound_stmt: expr_stmt

expr_stmt: _expr (":" suite | _NEWLINE)
    | DOC "def" _expr (":" suite | _NEWLINE) -> fn

suite: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

test_expr: DOC _expr

_expr: quantity_expr+

?quantity_expr: _atom ("'" quant_unit)?

_atom: subscript
    | field_accessor_function
    | DECIMAL_LITERAL
    | RADICAL_LITERAL
    | FLOAT_LITERAL
    | STRING_FULL
    | STRIDENT
    | STRESC
    | string_interpolation
    | tuple_expr
    | nil
    | list_expr
    | set_expr
    | map_expr

?subscript: _subscribable
    | subscript "." subscriber

field_accessor_function: "." subscriber

subscriber: name
    | "(" _expr ")"

_subscribable: ref
    | named_tuple
    | "(" _expr ")"

string_interpolation: STRING_LEFT _expr? (STRING_MID _expr?)* STRING_RIGHT

nil: "(" ")"

named_tuple: "(" tuple_binding ("," tuple_binding)* [","] ")"
tuple_binding: name ":" _expr

tuple_expr: "(" _expr "," [_expr ("," _expr)* [","]] ")"

list_expr: "[" [_expr ("," _expr)* [","]] "]"

set_expr: "{" [_expr ("," _expr)* [","]] "}"

map_expr: "{" map_binding ("," map_binding)* [","] "}"
    | "{" ":" "}"
map_binding: _expr ":" _expr

quant_unit: name
    | "(" [quant_unit_expr] ")"

quant_unit_expr: quant_atom
    | quant_unit_expr AST quant_atom
    | quant_unit_expr DIV quant_atom

quant_atom: quant_unit [POW fractional]

fractional: signed_integer [DIV signed_integer]

signed_integer: [PLUS|MINUS](DECIMAL_LITERAL|RADICAL_LITERAL)


ref: name

name: IDENTIFIER | OP_NAME
